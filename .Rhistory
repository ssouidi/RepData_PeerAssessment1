identical (my_matrix, my_matrix2)
patients <- c("Bll", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind (my_matric, patients)
cbind (my_matrix, patients)
cbind (patients, my_matrix)
my_data <- data.frame (patients, my_matrix)
my_data
class (my_data)
cnams <- c("patient", "age", "weight", "bp", "rating", "test")
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames (my_data) <- cnames
print (my_data)
my_data
x<- matrix (rnorm (200), 20,10)
x
x
apply (x, 1, mean)
apply (x, 2, mean)
apply (x, 2, mean)
apply (x, 3, mean)
apply (x, row, mean)
apply (x, rows, mean)
?apply
str (apply)
str (rowSum)
str (rowSums)
rowSums (x)
colSums (x)
a <- array (rnorm (2*2*10), c (2,2,10))
a
a <- array (c(1,2), c (2,2,10))
a
a <- array (c(1,2), c (2,2)
)
)
a <- array (c(1,2), c (2,2))
a
a <- array (c(1,2), c (2,2, 2))
a
a <- array (c(1,2), c (1,2, 3))
a
a <- array (c(4,5), c (2,2, 2))
a
a <- array (c(4,5), c (1,2))
a
a <- array (c(4,5), c (2,2))
a
a <- array (c(4,5), c (2,2, 3))
a
a <- array (c(4,5), c (1,2, 3))
a
a <- array (c(4,5), c (2,2, 3))
a
a <- array (c(4,5), c (3,2, 3))
a
a <- array (c(4,5), c (5,2, 3))
a
a <- array (c(4,5), c (5,3, 3))
a
a <- array (c(4,5), c (5,2, 3))
a
a <- array (c(4,5), c (5,5, 3))
a
a <- array (c(4,5), c (5,5, 4))
a
dim (x)
dim (a)
x <- list (rep (1,4), reap (2,3), rep (3,2), rep (4,1))
x <- list (rep (1,4), rep (2,3), rep (3,2), rep (4,1))
x
str (rep)
rep(8)
rep(8, 6)
f <- gl (3,10)
f
?gl
gl(2, 8, labels = c("Control", "Treat"))
x <- c (rnorm (10), runif (10), rnorm (10,1))
x
rnorm (10)
runif (10)
rnorm (10,1)
View (x)
c <- c (1,2,3)
c
View (c)
set.seed (1)
rpois (5,2)
rpois (5,2)
search ()
? matrix
matrix (1:10, 3, 3)
matrix (1:9, 3, 3)
t <- matrix (1:9, 3, 3)
solve (t)
?sole()
?solve ()
diag (t)
t <- matrix (1:4, 2, 2)
t
solve (t)
t <- matrix (1:4, 4, 4)
t
solve (t)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- null
set <- function (y) {
x <<- y
I <<- null
}
get - function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
message ("getting cached data")
return (I)
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
cacheSolve (t)
t
t <- matrix (1:4, 2,2)
t
solve (t)
cacheSolve (t)
ls
makeCacheMatrix (t)
makeCacheMatrix
makeCacheMatrix (t)
cacheSolve (t)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- null
set <- function (y) {
x <<- y
I <<- null
}
get - function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
message ("getting cached data")
return (I)
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
cacheSolve (t)
a <- makeCacheMatrix()
makeCacheMatrix <- function(x = matrix()) {
I <- null
set <- function (y) {
x <<- y
I <<- null
}
get - function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
a <- makeCacheMatrix()
a <- makeCacheMatrix
a$set (matrix (1:, 2,2))
a$set (matrix (1:4, 2,2))
akeCacheMatrix2 <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve2 <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get ()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix()
a<-makeCacheMatrix
a$set(matrix(1:4,2,2)
)
a<-makeCacheMatrix2
a<-makeCacheMatrix2 ()
akeCacheMatrix2 <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve2 <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get ()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
makeCacheMatrix2 <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve2 <- function(x=matrix(), ...) {
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get ()
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
a<-makeCacheMatrix2 ()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve2(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- null
set <- function (y) {
x <<- y
I <<- NULL
}
get - function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
message ("getting cached data")
return (I)
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
a<-makeCacheMatrix ()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function (y) {
x <<- y
I <<- NULL
}
get - function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
message ("getting cached data")
return (I)
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
a<-makeCacheMatrix ()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function (y) {
x <<- y
I <<- NULL
}
get <- function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
message ("getting cached data")
return (I)
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
a<-makeCacheMatrix ()
a$set(matrix(1:4,2,2))
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function (y) {
x <<- y
I <<- NULL
}
get <- function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
if (x$getInverse () == x$setInverse ()) {
message ("getting cached data")
return (I)
}
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
cacheSolve(a)
a<-makeCacheMatrix ()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function (y) {
x <<- y
I <<- NULL
}
get <- function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
if (x == y ){
message ("getting cached data")
return (I)
}
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function (y) {
x <<- y
I <<- NULL
}
get <- function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
if (x$getInverse () == x$setInverse (x) ) {
message ("getting cached data")
return (I)
}
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
cacheSolve(a)
a
a
a<-makeCacheMatrix ()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
I <- NULL
set <- function (y) {
x <<- y
I <<- NULL
}
get <- function () x
setInverse <- function (solve) I <<- solve
getInverse <- function () I
list (set = set, get = get, setInverse = setInverse,
getInverse  = getInverse)
}
## Write a short comment describing this function
cacheSolve <- function(x = matrix (), ...) {
## Return a matrix that is the inverse of 'x'
I <- x$getInverse ()
if (!is.null (I)) {
message ("getting cached data")
return (I)
}
data <- x$get ()
I <- solve (data, ...)
x$setInverse (I)
I
}
a<-makeCacheMatrix ()
a$set(matrix(1:4,2,2))
cacheSolve(a)
cacheSolve(a)
a$set(matrix(2:6,2,2))
a$set(matrix(6:10,2,2))
a$set(matrix(6:9,2,2))
cacheSolve(a)
cacheSolve(a)
a$set(matrix(1:4,2,2))
cacheSolve(a)
samples ()
example (points)
getwd()
setwd ("/home/samir/Document")
setwd ("/home/samir/Documents")
getwd()
data <- read.cvs ("household_power_consumption.txt")
data <- read.csv("household_power_consumption.txt")
str (data)
